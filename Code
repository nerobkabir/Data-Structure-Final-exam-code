// sorted

#include <bits/stdc++.h>
using namespace std;
int main(){
    int t;
    cin >> t;
    while(t--){
        list<int> l;
        int n;
        cin >> n;
        int a[n];
        for(int i=0;i<n;i++){
            cin >> a[i];
            l.push_back(a[i]);
        }
        l.sort();
        l.unique();

        for(int value: l){
            cout << value << " ";
        }
        cout << endl;
    }

    return 0;
}

// pairs

#include <bits/stdc++.h>
using namespace std;

bool cmp( pair<string, int>& a, pair<string, int>& b) {
    
    if (a.first == b.first) {
        
        return a.second > b.second;
    }
    return a.first < b.first; 
}

int main() {
    int n;
    cin >> n;
    
    vector<pair<string, int>> v;
    
    for (int i = 0; i < n; i++) {
        string name;
        int value;
        cin >> name >> value;
        v.push_back(make_pair(name, value));
    }
    
    sort(v.begin(), v.end(), cmp);
    
    for (auto it = v.begin(); it != v.end(); it++) {
        cout << it->first << " " << it->second << endl;
    }
    
    return 0;
}

// Count me

#include <bits/stdc++.h>
using namespace std;

int main(){
    int t;
    cin >> t;
    cin.ignore();  

    while(t--) {
        string s;
        getline(cin, s);  
        
        stringstream ss(s);
        
        map<string, int> mp;
        
        string word, ans;
        int cnt = 0;
        while(ss >> word){
            mp[word]++;
            if(mp[word] > cnt){
                cnt = mp[word];
                ans = word;
            }
        }
        cout << ans << " " << cnt << endl;
    }

    return 0;
}

// Give current Min

#include<bits/stdc++.h>
using namespace std;
int main()
{
    
    
    priority_queue<int, vector<int>, greater<int>>pq;
    int n; 
    cin >> n;
    for(int i=1;i<=n;i++){
        int x; 
        cin >> x;
        pq.push(x);
    }
    int q; 
    cin >> q;
    while(q--){
        int x; 
        cin >> x;
        if(x == 0){
            int val; 
            cin>>val;
            
            pq.push(val);
            cout << pq.top() << endl;
        }
        else if(x == 1){
            if(!pq.empty()){
                cout<<pq.top()<<endl;
            } 
            else {
                cout<<"Empty"<<endl;
            }
        }
        else{
            if(!pq.empty()){
                pq.pop();
            }
            if(!pq.empty()){
                cout<<pq.top()<<endl;
            }
            else {
                cout<<"Empty"<<endl;
            }
        }
    }
    return 0;
}

// Give current Max

#include<bits/stdc++.h>
using namespace std;
class Student{
    public:
        string name;
        int roll;
        int marks;
    Student(string name, int roll, int marks){
        this->name = name;
        this->roll = roll;
        this->marks = marks;
    }
};
class cmp{
    public:
    bool operator()(Student a, Student b){
        if(a.marks < b.marks) {
            return true;
        }
        else if(a.marks > b.marks){
            return false;
        }
        else{
            if(a.roll > b.roll){
                return true;
            }
            return false;
        }
    }
};
int main()
{
    int n; 
    cin >> n;
    priority_queue<Student, vector<Student>, cmp> pq;
    for(int i=1;i<=n;i++){
        string name;
        int roll, marks;
        cin >> name >> roll >> marks;
        Student obj(name, roll, marks);
        pq.push(obj);
    }
    int q; 
    cin >> q;
    while(q--){
        int value; 
        cin >> value;
        if(value == 0){
            string name;
            int roll, marks;
            cin >> name >> roll >> marks;
            Student obj(name, roll, marks);
            pq.push(obj);
            auto [a,b,c] = pq.top();
            cout << a << " " << b << " " << c << endl;
        }
        else if(value == 1){
            if(!pq.empty()){
                auto [a,b,c] = pq.top();
                cout << a << " " << b << " " << c << endl;
            }
            else {
                cout << "Empty" << endl;
            }
        }
        else{
            if(!pq.empty()){
                pq.pop();
            }
            if(!pq.empty()){
                auto [a,b,c] = pq.top();
                cout << a << " " << b << " " << c << endl;
            }
            else {
                cout << "Empty" << endl;
            }
        }
    }
    return 0;
}
